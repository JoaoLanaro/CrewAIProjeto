!pip install -q -U crewai crewai_tools

from crewai import Agent, Task, Crew

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get("GEMINI_API_KEY")
os.environ["GOOGLE_MODEL_NAME"] = 'gemini-2.0-flash'

os.environ["SERPER_AI_KEY"] = userdata.get('SERPER_API_KEY')

from crewai_tools import SerperDevTool, ScrapeWebsiteTool

search_tool = SerperDevTool()
scrape_tool = ScrapeWebsiteTool()

from crewai import LLM

llm = LLM(
    model = "gemini-2.0-flash",
    temperature = 0.7
)

# 1 - Buscador de Conteúdo 2 - Redator de Conteúdo 3 - Editor de Conteúdo

buscador = Agent(
    role = 'Buscador de Conteúdo',
    goal = 'Buscar conteúdo online sobre {tema}',
    backstory = 'Você está trabalhando na criação de artigos para o LinkedIn sobre {tema}.'
                'Você vai fazer uma busca sobre informações na internet, coletá-las e agrupá-las.'
                'Seu trabalho servirá de base para o Redator de Conteúdo.',
    tools = [search_tool, scrape_tool],
    verbose = True,
    llm = "gemini-2.0-flash"
)

redator = Agent(
    role = 'Redator de Conteúdo',
    goal = 'Escrever um texto de LinkedIn sobre {tema}',
    backstory = 'Você está trabalhando na redação de um artigo para o LinkedIn sobre {tema}.'
                'Você vai utilizar os dados coletados pelo Buscador de Conteúdo para escrever um texto'
                'para o LinkedIn. Dê opiniões sobre {tema}, mas ao fazê-lo, deixe claro que são opiniões pessoais',
    tools = [search_tool, scrape_tool],
    verbose = True,
    llm = "gemini-2.0-flash"
)

editor = Agent(
    role = 'Editor de Conteúdo',
    goal = 'Editar um texto de LinkedIn sobre {tema} para que ele tenha um tone mais formal',
    backstory = 'Você está trabalhando na edição de um artigo para o LinkedIn'
                'Você vai receber o texto do Redator de Conteúdo, e editá-lo para o tom de voz'
                'de João Lanaro, que é mais informal',
    tools = [search_tool, scrape_tool],
    verbose = True,
    llm = "gemini-2.0-flash"
)

# Tarefas

buscar = Task(
    description = (
        "1. Priorize as útlimas tendências, os principais atores e as notícias mais relevantes sobre {tema}. \n"
        "2. Identifique o público-alvo, considerando seus interesses e pontos de dor. \n"
        "3. Inclua palavras-chave de SEO e dados ou fontes relevantes"
    ),
    agent = buscador,
    expected_output = 'Um plano de tendências sobre {tema}, com as palavras mais relevantes de SEO e as últimas notícias.'
)

redigir = Task(
    description = (
        "1. Use os dados coletados de conteúdo para criar um post de LindedIn atraente sobre {tema}. \n"
        "2. Incorpore palavras-chave de SEO de forma natural. \n"
        "3. Certifique-se de que o post esteja estruturado de forma cativante, com uma conclusão que faça o leitor refletir. \n"
    ),
    agent = redator,
    expected_output = 'Um texto de LinkedIn sobre {tema}.'
)

editar = Task(
    description = ("Revisar a postagem do LinkedIn em questão quanto a erros gramaticais e alinhamento com a voz pessoal do João Lanaro"),
    agent = editor,
    expected_output = "Um texto de LinkedIn pronto para publicação, seguindo o tom de voz esperado."
                      "O texto está separado em parágrafos e não usa bullet point"
)

# Crew - Equipe

equipe = Crew(
    agents = [buscador, redator, editor],
    tasks = [buscar, redigir, editar],
    verbose = True,
    manager_llm = "gemini-2.0-flash", # Specify the model here
    api_key=os.environ["GOOGLE_API_KEY"]
)

# Rodando o Crew

tema_do_artigo = 'Inteligência Artificial'

entradas = {"tema": tema_do_artigo}

resultado = equipe.kickoff(inputs = entradas)
